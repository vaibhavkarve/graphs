"""
This type stub file was generated by pyright.
"""

from typing import Type

__all__ = ['GROUND_TYPES', 'HAS_GMPY', 'SYMPY_INTS', 'MPQ', 'MPZ', 'bit_scan1', 'bit_scan0', 'remove', 'factorial', 'sqrt', 'is_square', 'sqrtrem', 'gcd', 'lcm', 'gcdext', 'invert', 'legendre', 'jacobi', 'kronecker', 'iroot', 'is_fermat_prp', 'is_euler_prp', 'is_strong_prp', 'is_fibonacci_prp', 'is_lucas_prp', 'is_selfridge_prp', 'is_strong_lucas_prp', 'is_strong_selfridge_prp', 'is_bpsw_prp', 'is_strong_bpsw_prp']
_PYTHON_FLINT_VERSION_NEEDED = ...
_GMPY2_MIN_VERSION = ...
_SYMPY_GROUND_TYPES = ...
_flint = ...
_gmpy = ...
if _SYMPY_GROUND_TYPES in ('auto', 'flint'):
    _flint = ...
if _SYMPY_GROUND_TYPES in ('auto', 'gmpy', 'gmpy2'):
    _gmpy = ...
if _SYMPY_GROUND_TYPES not in ('flint', 'gmpy', 'python'):
    _SYMPY_GROUND_TYPES = ...
LONG_MAX = ...
SYMPY_INTS: tuple[Type, ...]
if _SYMPY_GROUND_TYPES == 'gmpy':
    flint = ...
    gmpy = ...
    HAS_GMPY = ...
    GROUND_TYPES = ...
    SYMPY_INTS = ...
    MPZ = ...
    MPQ = ...
    bit_scan1 = ...
    bit_scan0 = ...
    remove = ...
    factorial = ...
    sqrt = ...
    is_square = ...
    sqrtrem = ...
    gcd = ...
    lcm = ...
    gcdext = ...
    invert = ...
    legendre = ...
    jacobi = ...
    kronecker = ...
    def iroot(x, n):
        ...
    
    is_fermat_prp = ...
    is_euler_prp = ...
    is_strong_prp = ...
    is_fibonacci_prp = ...
    is_lucas_prp = ...
    is_selfridge_prp = ...
    is_strong_lucas_prp = ...
    is_strong_selfridge_prp = ...
    is_bpsw_prp = ...
    is_strong_bpsw_prp = ...
else:
    flint = ...
    gmpy = ...
    HAS_GMPY = ...
    GROUND_TYPES = ...
    SYMPY_INTS = ...
    MPZ = ...
    MPQ = ...
    bit_scan1 = ...
    bit_scan0 = ...
    remove = ...
    factorial = ...
    def sqrt(x):
        ...
    
    def is_square(x): # -> Literal[False]:
        ...
    
    def sqrtrem(x):
        ...
    
    def gcd(*args):
        ...
    
    def lcm(*args):
        ...
    
    gcdext = ...
    invert = ...
    legendre = ...
    def jacobi(x, y):
        ...
    
    kronecker = ...
    def iroot(x, n): # -> tuple[Any, Any]:
        ...
    
    is_fermat_prp = ...
    is_euler_prp = ...
    is_strong_prp = ...
    is_fibonacci_prp = ...
    is_lucas_prp = ...
    is_selfridge_prp = ...
    is_strong_lucas_prp = ...
    is_strong_selfridge_prp = ...
    is_bpsw_prp = ...
    is_strong_bpsw_prp = ...
