"""
This type stub file was generated by pyright.
"""

from sympy.core import Add, Expr, Mul, Pow, Symbol
from sympy.core.numbers import ComplexInfinity, Exp1, GoldenRatio, ImaginaryUnit, Infinity, NaN, NegativeInfinity, Number, Pi, TribonacciConstant
from sympy.functions import cos, exp, log, sign, sin
from ..predicates.calculus import FinitePredicate, InfinitePredicate, NegativeInfinitePredicate, PositiveInfinitePredicate

"""
This module contains query handlers responsible for calculus queries:
infinitesimal, finite, etc.
"""
@FinitePredicate.register(Symbol)
def _(expr, assumptions): # -> Literal[True] | None:
    """
    Handles Symbol.
    """
    ...

@FinitePredicate.register(Add)
def _(expr, assumptions): # -> bool | None:
    """
    Return True if expr is bounded, False if not and None if unknown.

    Truth Table:

    +-------+-----+-----------+-----------+
    |       |     |           |           |
    |       |  B  |     U     |     ?     |
    |       |     |           |           |
    +-------+-----+---+---+---+---+---+---+
    |       |     |   |   |   |   |   |   |
    |       |     |'+'|'-'|'x'|'+'|'-'|'x'|
    |       |     |   |   |   |   |   |   |
    +-------+-----+---+---+---+---+---+---+
    |       |     |           |           |
    |   B   |  B  |     U     |     ?     |
    |       |     |           |           |
    +---+---+-----+---+---+---+---+---+---+
    |   |   |     |   |   |   |   |   |   |
    |   |'+'|     | U | ? | ? | U | ? | ? |
    |   |   |     |   |   |   |   |   |   |
    |   +---+-----+---+---+---+---+---+---+
    |   |   |     |   |   |   |   |   |   |
    | U |'-'|     | ? | U | ? | ? | U | ? |
    |   |   |     |   |   |   |   |   |   |
    |   +---+-----+---+---+---+---+---+---+
    |   |   |     |           |           |
    |   |'x'|     |     ?     |     ?     |
    |   |   |     |           |           |
    +---+---+-----+---+---+---+---+---+---+
    |       |     |           |           |
    |   ?   |     |           |     ?     |
    |       |     |           |           |
    +-------+-----+-----------+---+---+---+

        * 'B' = Bounded

        * 'U' = Unbounded

        * '?' = unknown boundedness

        * '+' = positive sign

        * '-' = negative sign

        * 'x' = sign unknown

        * All Bounded -> True

        * 1 Unbounded and the rest Bounded -> False

        * >1 Unbounded, all with same known sign -> False

        * Any Unknown and unknown sign -> None

        * Else -> None

    When the signs are not the same you can have an undefined
    result as in oo - oo, hence 'bounded' is also undefined.
    """
    ...

@FinitePredicate.register(Mul)
def _(expr, assumptions): # -> bool | None:
    """
    Return True if expr is bounded, False if not and None if unknown.

    Truth Table:

    +---+---+---+--------+
    |   |   |   |        |
    |   | B | U |   ?    |
    |   |   |   |        |
    +---+---+---+---+----+
    |   |   |   |   |    |
    |   |   |   | s | /s |
    |   |   |   |   |    |
    +---+---+---+---+----+
    |   |   |   |        |
    | B | B | U |   ?    |
    |   |   |   |        |
    +---+---+---+---+----+
    |   |   |   |   |    |
    | U |   | U | U | ?  |
    |   |   |   |   |    |
    +---+---+---+---+----+
    |   |   |   |        |
    | ? |   |   |   ?    |
    |   |   |   |        |
    +---+---+---+---+----+

        * B = Bounded

        * U = Unbounded

        * ? = unknown boundedness

        * s = signed (hence nonzero)

        * /s = not signed
    """
    ...

@FinitePredicate.register(Pow)
def _(expr, assumptions): # -> bool | None:
    """
    * Unbounded ** NonZero -> Unbounded

    * Bounded ** Bounded -> Bounded

    * Abs()<=1 ** Positive -> Bounded

    * Abs()>=1 ** Negative -> Bounded

    * Otherwise unknown
    """
    ...

@FinitePredicate.register(exp)
def _(expr, assumptions): # -> bool | None:
    ...

@FinitePredicate.register(log)
def _(expr, assumptions): # -> bool | None:
    ...

@FinitePredicate.register_many(cos, sin, Number, Pi, Exp1, GoldenRatio, TribonacciConstant, ImaginaryUnit, sign)
def _(expr, assumptions): # -> Literal[True]:
    ...

@FinitePredicate.register_many(ComplexInfinity, Infinity, NegativeInfinity)
def _(expr, assumptions): # -> Literal[False]:
    ...

@FinitePredicate.register(NaN)
def _(expr, assumptions): # -> None:
    ...

@InfinitePredicate.register(Expr)
def _(expr, assumptions): # -> bool | None:
    ...

@PositiveInfinitePredicate.register(Infinity)
def _(expr, assumptions): # -> Literal[True]:
    ...

@PositiveInfinitePredicate.register_many(NegativeInfinity, ComplexInfinity)
def _(expr, assumptions): # -> Literal[False]:
    ...

@NegativeInfinitePredicate.register(NegativeInfinity)
def _(expr, assumptions): # -> Literal[True]:
    ...

@NegativeInfinitePredicate.register_many(Infinity, ComplexInfinity)
def _(expr, assumptions): # -> Literal[False]:
    ...

