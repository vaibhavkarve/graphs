"""
This type stub file was generated by pyright.
"""

import builtins
from sympy.external.gmpy import GROUND_TYPES
from gmpy2 import denom as gmpy_denom, gcd as gmpy_gcd, gcdext as gmpy_gcdex, lcm as gmpy_lcm, mpq as GMPYRational, mpz as GMPYInteger, numer as gmpy_numer, qdiv as gmpy_qdiv

"""Ground types for various mathematical domains in SymPy. """
PythonInteger = builtins.int
PythonReal = builtins.float
PythonComplex = builtins.complex
class _GMPYInteger:
    def __init__(self, obj) -> None:
        ...
    


class _GMPYRational:
    def __init__(self, obj) -> None:
        ...
    


if GROUND_TYPES == 'gmpy':
    gcdex = ...
    gcd = ...
    lcm = ...
else:
    GMPYInteger = ...
    GMPYRational = ...
    gmpy_numer = ...
    gmpy_denom = ...
    gmpy_gcdex = ...
    gmpy_gcd = ...
    gmpy_lcm = ...
    gmpy_qdiv = ...
    def gcd(a, b):
        ...
    
    def gcdex(a, b): # -> tuple[Any, Any, Any]:
        ...
    
    def lcm(a, b):
        ...
    
    GMPYInteger = ...
    GMPYRational = ...
    gmpy_numer = ...
    gmpy_denom = ...
    gmpy_gcdex = ...
    gmpy_gcd = ...
    gmpy_lcm = ...
    gmpy_qdiv = ...
    gcdex = ...
    gcd = ...
    lcm = ...
__all__ = ['PythonInteger', 'PythonReal', 'PythonComplex', 'PythonRational', 'python_gcdex', 'python_gcd', 'python_lcm', 'SymPyReal', 'SymPyInteger', 'SymPyRational', 'GMPYInteger', 'GMPYRational', 'gmpy_numer', 'gmpy_denom', 'gmpy_gcdex', 'gmpy_gcd', 'gmpy_lcm', 'gmpy_qdiv', 'factorial', 'sqrt', 'is_square', 'sqrtrem', 'GMPYInteger', 'GMPYRational']
