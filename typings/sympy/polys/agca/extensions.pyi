"""
This type stub file was generated by pyright.
"""

from sympy.polys.domains.domain import Domain
from sympy.polys.domains.domainelement import DomainElement
from sympy.printing.defaults import DefaultPrinting

"""Finite extensions of ring domains."""
class ExtensionElement(DomainElement, DefaultPrinting):
    """
    Element of a finite extension.

    A class of univariate polynomials modulo the ``modulus``
    of the extension ``ext``. It is represented by the
    unique polynomial ``rep`` of lowest degree. Both
    ``rep`` and the representation ``mod`` of ``modulus``
    are of class DMP.

    """
    __slots__ = ...
    def __init__(self, rep, ext) -> None:
        ...
    
    def parent(f): # -> Any:
        ...
    
    def as_expr(f):
        ...
    
    def __bool__(f): # -> bool:
        ...
    
    def __pos__(f): # -> Self:
        ...
    
    def __neg__(f): # -> ExtElem:
        ...
    
    def __add__(f, g): # -> ExtElem | _NotImplementedType:
        ...
    
    __radd__ = ...
    def __sub__(f, g): # -> ExtElem | _NotImplementedType:
        ...
    
    def __rsub__(f, g): # -> ExtElem | _NotImplementedType:
        ...
    
    def __mul__(f, g): # -> ExtElem | _NotImplementedType:
        ...
    
    __rmul__ = ...
    def inverse(f): # -> ExtElem:
        """Multiplicative inverse.

        Raises
        ======

        NotInvertible
            If the element is a zero divisor.

        """
        ...
    
    def __truediv__(f, g): # -> _NotImplementedType | ExtElem:
        ...
    
    __floordiv__ = ...
    def __rtruediv__(f, g): # -> _NotImplementedType:
        ...
    
    __rfloordiv__ = ...
    def __mod__(f, g): # -> _NotImplementedType:
        ...
    
    def __rmod__(f, g): # -> _NotImplementedType:
        ...
    
    def __pow__(f, n): # -> ExtElem:
        ...
    
    def __eq__(f, g) -> bool:
        ...
    
    def __ne__(f, g) -> bool:
        ...
    
    def __hash__(f) -> int:
        ...
    
    def __str__(f) -> str:
        ...
    
    __repr__ = ...
    @property
    def is_ground(f):
        ...
    
    def to_ground(f):
        ...
    


ExtElem = ExtensionElement
class MonogenicFiniteExtension(Domain):
    r"""
    Finite extension generated by an integral element.

    The generator is defined by a monic univariate
    polynomial derived from the argument ``mod``.

    A shorter alias is ``FiniteExtension``.

    Examples
    ========

    Quadratic integer ring $\mathbb{Z}[\sqrt2]$:

    >>> from sympy import Symbol, Poly
    >>> from sympy.polys.agca.extensions import FiniteExtension
    >>> x = Symbol('x')
    >>> R = FiniteExtension(Poly(x**2 - 2)); R
    ZZ[x]/(x**2 - 2)
    >>> R.rank
    2
    >>> R(1 + x)*(3 - 2*x)
    x - 1

    Finite field $GF(5^3)$ defined by the primitive
    polynomial $x^3 + x^2 + 2$ (over $\mathbb{Z}_5$).

    >>> F = FiniteExtension(Poly(x**3 + x**2 + 2, modulus=5)); F
    GF(5)[x]/(x**3 + x**2 + 2)
    >>> F.basis
    (1, x, x**2)
    >>> F(x + 3)/(x**2 + 2)
    -2*x**2 + x + 2

    Function field of an elliptic curve:

    >>> t = Symbol('t')
    >>> FiniteExtension(Poly(t**2 - x**3 - x + 1, t, field=True))
    ZZ(x)[t]/(t**2 - x**3 - x + 1)

    """
    is_FiniteExtension = ...
    dtype = ...
    def __init__(self, mod) -> None:
        ...
    
    def new(self, arg): # -> ExtElem:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __str__(self) -> str:
        ...
    
    __repr__ = ...
    @property
    def has_CharacteristicZero(self):
        ...
    
    def characteristic(self):
        ...
    
    def convert(self, f, base=...): # -> ExtElem:
        ...
    
    def convert_from(self, f, base): # -> ExtElem:
        ...
    
    def to_sympy(self, f):
        ...
    
    def from_sympy(self, f): # -> ExtElem:
        ...
    
    def set_domain(self, K): # -> Self:
        ...
    
    def drop(self, *symbols): # -> Self:
        ...
    
    def quo(self, f, g): # -> ExtElem:
        ...
    
    def exquo(self, f, g): # -> ExtElem:
        ...
    
    def is_negative(self, a): # -> Literal[False]:
        ...
    
    def is_unit(self, a): # -> bool | None:
        ...
    


FiniteExtension = MonogenicFiniteExtension
