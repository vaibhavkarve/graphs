"""
This type stub file was generated by pyright.
"""

from typing import Any
from sympy.codegen.ast import Type
from sympy.printing.codeprinter import CodePrinter

"""
C code printer

The C89CodePrinter & C99CodePrinter converts single SymPy expressions into
single C expressions, using the functions defined in math.h where possible.

A complete code generator, which uses ccode extensively, can be found in
sympy.utilities.codegen. The codegen module can be used to generate complete
source code files that are compilable without further modifications.


"""
known_functions_C89 = ...
known_functions_C99 = ...
reserved_words = ...
reserved_words_c99 = ...
def get_math_macros(): # -> dict[Any | type[AppliedUndef] | Expr, str]:
    """ Returns a dictionary with math-related macros from math.h/cmath

    Note that these macros are not strictly required by the C/C++-standard.
    For MSVC they are enabled by defining "_USE_MATH_DEFINES" (preferably
    via a compilation flag).

    Returns
    =======

    Dictionary mapping SymPy expressions to strings (macro names)

    """
    ...

class C89CodePrinter(CodePrinter):
    """A printer to convert Python expressions to strings of C code"""
    printmethod = ...
    language = ...
    standard = ...
    reserved_words = ...
    _default_settings: dict[str, Any] = ...
    type_aliases = ...
    type_mappings: dict[Type, Any] = ...
    type_headers = ...
    type_macros: dict[Type, tuple[str, ...]] = ...
    type_func_suffixes = ...
    type_literal_suffixes = ...
    type_math_macro_suffixes = ...
    math_macros = ...
    _ns = ...
    _kf: dict[str, Any] = ...
    def __init__(self, settings=...) -> None:
        ...
    
    def indent_code(self, code): # -> str | list[Any]:
        """Accepts a string of code or a list of code lines"""
        ...
    
    _print_List = ...
    _print_union = ...


class C99CodePrinter(C89CodePrinter):
    standard = ...
    reserved_words = ...
    type_mappings = ...
    type_headers = ...
    _kf: dict[str, Any] = ...
    _prec_funcs = ...


class C11CodePrinter(C99CodePrinter):
    ...


c_code_printers = ...
