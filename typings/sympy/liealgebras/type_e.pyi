"""
This type stub file was generated by pyright.
"""

from .cartan_type import Standard_Cartan

class TypeE(Standard_Cartan):
    def __new__(cls, n): # -> Self:
        ...
    
    def dimension(self): # -> Literal[8]:
        """Dimension of the vector space V underlying the Lie algebra

        Examples
        ========

        >>> from sympy.liealgebras.cartan_type import CartanType
        >>> c = CartanType("E6")
        >>> c.dimension()
        8
        """
        ...
    
    def basic_root(self, i, j): # -> list[int]:
        """
        This is a method just to generate roots
        with a -1 in the ith position and a 1
        in the jth position.

        """
        ...
    
    def simple_root(self, i): # -> list[float] | list[int]:
        """
        Every Lie algebra has a unique root system.
        Given a root system Q, there is a subset of the
        roots such that an element of Q is called a
        simple root if it cannot be written as the sum
        of two elements in Q.  If we let D denote the
        set of simple roots, then it is clear that every
        element of Q can be written as a linear combination
        of elements of D with all coefficients non-negative.

        This method returns the ith simple root for E_n.

        Examples
        ========

        >>> from sympy.liealgebras.cartan_type import CartanType
        >>> c = CartanType("E6")
        >>> c.simple_root(2)
        [1, 1, 0, 0, 0, 0, 0, 0]
        """
        ...
    
    def positive_roots(self): # -> dict[Any, Any] | None:
        """
        This method generates all the positive roots of
        A_n.  This is half of all of the roots of E_n;
        by multiplying all the positive roots by -1 we
        get the negative roots.

        Examples
        ========

        >>> from sympy.liealgebras.cartan_type import CartanType
        >>> c = CartanType("A3")
        >>> c.positive_roots()
        {1: [1, -1, 0, 0], 2: [1, 0, -1, 0], 3: [1, 0, 0, -1], 4: [0, 1, -1, 0],
                5: [0, 1, 0, -1], 6: [0, 0, 1, -1]}
        """
        ...
    
    def roots(self): # -> Literal[72, 126, 240] | None:
        """
        Returns the total number of roots of E_n
        """
        ...
    
    def cartan_matrix(self):
        """
        Returns the Cartan matrix for G_2
        The Cartan matrix matrix for a Lie algebra is
        generated by assigning an ordering to the simple
        roots, (alpha[1], ...., alpha[l]).  Then the ijth
        entry of the Cartan matrix is (<alpha[i],alpha[j]>).

        Examples
        ========

        >>> from sympy.liealgebras.cartan_type import CartanType
        >>> c = CartanType('A4')
        >>> c.cartan_matrix()
        Matrix([
        [ 2, -1,  0,  0],
        [-1,  2, -1,  0],
        [ 0, -1,  2, -1],
        [ 0,  0, -1,  2]])


        """
        ...
    
    def basis(self): # -> Literal[78, 133, 248] | None:
        """
        Returns the number of independent generators of E_n
        """
        ...
    
    def dynkin_diagram(self): # -> str:
        ...
    


